import z from 'zod';
declare module 'zod' {
    interface ZodMeta {
        [k: string | number | symbol]: unknown;
    }
    interface ZodTypeDef {
        meta?: ZodMeta;
    }
    interface ZodType<Output = any, Def extends z.ZodTypeDef = z.ZodTypeDef, Input = Output> {
        getMeta(): this['_def'] extends {
            meta: infer M;
        } ? M : ZodMeta | undefined;
        meta<T extends ZodMeta = ZodMeta>(meta: T): ZodType<Output, Def extends {
            meta: infer M;
        } ? Def & {
            meta: M & T;
        } : Def & {
            meta: T;
        }, Input>;
    }
}
export declare function register(zod: typeof z): void;
