import { type ExtensionConfiguration } from "../../extension_configuration/main.js";
export type BuildOpts = {
    /** Build the buildtime component of the extension */
    buildtime: boolean;
    /** Build the serverless component of the extension */
    site: boolean;
    /** Build the Netlify Connect plugin of the extension */
    connector: boolean;
    /**
     * The mode used to build the extension. Analogous to the `netlify` CLI's build modes.
     *
     * - `build` is a single-build mode; the extension is built once and the process exits.
     * - `dev` is continuous (watch) mode where assets are rebuilt as they change. In addition to
     *   rebuilding assets continuously, this mode also starts any connectors and serves assets via a
     *   development server, etc.
     */
    mode: "build" | "dev";
    /** The directory to build to */
    outDir?: string | undefined;
    /** Preview URL used test the extension UI */
    previewUrl?: string | undefined;
    /**
     * The user's current working directory. All commands are executed and any paths are calculated
     * relative to this directory.
     */
    cwd: string;
    /** Open the extension UI local dev server preview in the Netlify UI */
    open?: boolean | undefined;
    /** Override the extension slug to be used in the dev preview */
    slug?: string | undefined;
    /** A path to redirect to after the Netlify UI dev preview opens */
    redirect?: string | undefined;
};
export declare const build: (opts: BuildOpts) => Promise<false | {
    config: {
        slug: string;
        connector?: {
            "local-frontend"?: {
                port: number;
                command: string;
                directory: string;
            } | undefined;
        } | undefined;
        name?: string | undefined;
        description?: string | undefined;
        hostSiteId?: string | undefined;
        scopes?: {
            user?: ("read" | "write")[] | undefined;
            env?: ("delete" | "read" | "write")[] | undefined;
            all?: boolean | undefined;
            site?: ("read" | "write")[] | undefined;
        } | undefined;
        use_cjs_shims?: boolean | undefined;
        ui?: {
            build?: {
                command?: string | undefined;
            } | undefined;
            dev?: {
                command?: string | undefined;
            } | undefined;
            surfaces?: import("@netlify/sdk--ui-core").Surfaces[] | undefined;
        } | undefined;
    };
    cwd: string;
    extension: import("../../index.js").NetlifyExtension<import("zod").ZodUnknown, import("zod").ZodUnknown, import("zod").ZodUnknown, import("zod").ZodUnknown, import("zod").ZodUnknown>;
    onRebuild: (listener: () => void | Promise<void>) => void;
    packageName: any;
    slug: string;
}>;
export declare function getDefaultEsbuildConfig(config: ExtensionConfiguration): {
    inject: string[];
} | {
    inject?: undefined;
};
export declare const esbuildPluginSeenNodeModules: () => {
    nodeModulesImports: Set<string>;
    plugin: {
        name: string;
        setup(build: import("esbuild").PluginBuild): void;
    };
};
//# sourceMappingURL=build.d.ts.map