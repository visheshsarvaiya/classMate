import { resolve } from "path";
import fsExtraPkg from "fs-extra";
import { extensionConfig, netlifyToml } from "../../constants/handler.js";
const { writeFile } = fsExtraPkg;
const parsePermissions = (inputString) => {
    const scopes = {};
    const entries = inputString?.split(",") ?? [];
    for (const entry of entries) {
        const [scope, action] = entry.split(":");
        if (!scopes[scope]) {
            scopes[scope] = [action];
        }
        else {
            scopes[scope].push(action);
        }
    }
    let outputString = "scopes:\n";
    for (const scope in scopes) {
        const actionsArray = scopes[scope].map((action) => `"${action}"`);
        // TODO(serhalp) This is pretty leaky, as it assumes exactly how much indentation to
        // include on each line. Consider returning an object and formatting it elsewhere.
        outputString += `    ${scope}: [${actionsArray.join(", ")}]\n`;
    }
    return outputString;
};
export const init = async (opts) => {
    const cwd = process.cwd();
    const { slug, description, permissions } = opts;
    const parsedScopes = permissions ? parsePermissions(permissions) : undefined;
    const toml = netlifyToml();
    const config = extensionConfig({
        slug,
        name: slug,
        description,
        parsedScopes,
        surfaces: opts.surface ?? [],
    });
    await writeFile(resolve(cwd, "netlify.toml"), toml);
    await writeFile(resolve(cwd, "extension.yaml"), config);
};
//# sourceMappingURL=init.js.map