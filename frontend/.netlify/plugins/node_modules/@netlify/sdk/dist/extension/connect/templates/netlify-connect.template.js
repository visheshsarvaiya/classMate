// the next line is replaced with a generated object at bundle time
const templateData = global.$SDK;
// @ts-ignore - this will exist at runtime not compile time - you can find the source files in "connector/utils/instance-id.ts" instance-id.ts is bundled on its own
import { makeUniqueInstanceIDTracker } from "./instance-id.js";
// @ts-ignore - index.js will be the bundled extension file - we copy this file next to it
import { extension } from "./index.js";
const { checkUnique } = makeUniqueInstanceIDTracker();
const connectorDefinition = extension.netlifyConnectPlugin;
export const onPluginInit = (helpers, pluginOptions) => {
    // lookup the connector instance by plugin options inside this fn so that multiple instances of this source plugin can run at the same time
    const connector = connectorDefinition.getConnectorInstance(pluginOptions, templateData.configSlug);
    // this will throw if the instance ID is not unique to the memory scope of this file. onPluginInit is called once per connector instance
    checkUnique(connector.instanceID);
    return connector.sourcePluginAPI.onPluginInit(helpers, pluginOptions);
};
export const createResolvers = (helpers, pluginOptions) => {
    // lookup the connector instance by plugin options inside this fn so that multiple instances of this source plugin can run at the same time
    const connector = connectorDefinition.getConnectorInstance(pluginOptions, templateData.configSlug);
    connector.sourcePluginAPI.createResolvers(helpers);
};
export const createSchemaCustomization = (helpers, pluginOptions) => {
    // lookup the connector instance by plugin options inside this fn so that multiple instances of this source plugin can run at the same time
    const connector = connectorDefinition.getConnectorInstance(pluginOptions, templateData.configSlug);
    return connector.sourcePluginAPI.createSchemaCustomization(helpers);
};
export const sourceNodes = (helpers, pluginOptions) => {
    // lookup the connector instance by plugin options inside this fn so that multiple instances of this source plugin can run at the same time
    const connector = connectorDefinition.getConnectorInstance(pluginOptions, templateData.configSlug);
    return connector.sourcePluginAPI.sourceNodes(helpers, pluginOptions);
};
//# sourceMappingURL=netlify-connect.template.js.map