import { IntegrationHandler, FunctionHandler } from "@netlify/integrations";
import { NetlifyExtensionClient } from "../api/index.js";
import { BuildHookFunction, NetlifySDKContext, BuildHookOptions, BuildHookType } from "../index.js";
export type BuildHooks = Record<BuildHookType, BuildHookFunction | null>;
export type BuildHooksOptions = Record<BuildHookType, BuildHookOptions | null>;
export type Handlers = Record<string, FunctionHandler<NetlifySDKContext<any, any, any>> | undefined>;
export type Wrappers = Record<string, IntegrationHandler | undefined>;
export type BuildContextContext<SiteConfig, TeamConfig, ConnectorConfig> = {
    site_id: string;
    team_id?: string;
    site_config: SiteConfig;
    team_config?: TeamConfig;
    client: NetlifyExtensionClient<SiteConfig, TeamConfig, ConnectorConfig>;
};
export type BuildContextHandler<SiteConfig, TeamConfig, BuildContext, Connector> = (context: BuildContextContext<SiteConfig, TeamConfig, Connector>) => Promise<BuildContext>;
export type NetlifyExtensionProps<Config, Context, Site, Team, Connector> = {
    buildConfigSchema?: Config;
    buildContextSchema?: Context;
    siteConfigSchema?: Site;
    teamConfigSchema?: Team;
    connectorConfigSchema?: Connector;
};
export type EdgeFunctionsSettings = {
    path: string;
    prefix: string;
    shouldInjectFunction: (options: {
        name: string;
    }) => boolean;
};
export type EdgeFunctionsOptions = {
    /**
     * A prefix value added to edge functions. For example, given a prefix value of `my_prefix`, an
     * edge function `hello-world.mts` will be named `my_prefix_hello-world`. Used to prevent naming
     * collisions between functions.
     */
    prefix: string;
    /**
     * An optional function that can be used to prevent edge functions from being injected into the
     * user's site. Receives the name of the function to be injected (excludes file extension).
     */
    shouldInjectFunction?: ((options: {
        name: string;
    }) => boolean) | undefined;
};
export type FunctionsSettings = {
    path: string;
    prefix: string;
    shouldInjectFunction: (options: {
        name: string;
    }) => boolean;
};
export type FunctionsOptions = {
    /**
     * A prefix value added to functions. For example, given a prefix value of `my_prefix`, a function
     * `hello-world.mts` will be named `my_prefix_hello-world`. Used to prevent naming collisions
     * between functions.
     */
    prefix: string;
    /**
     * An optional function that can be used to prevent functions from being injected into the user's
     * site. Receives the name of the function to be injected (excludes file extension).
     */
    shouldInjectFunction?: ((options: {
        name: string;
    }) => boolean) | undefined;
};
export type Manifest = {
    sdkVersion: string;
    hasDataIntegration?: boolean;
    hasBuildEventHandler?: boolean;
    hasIntegrationUI?: boolean;
    hasMCPContext?: boolean;
    uiSurfaces?: string[];
    supports?: {
        connect?: boolean;
        create?: boolean;
    };
};
//# sourceMappingURL=types.d.ts.map