import { z } from "zod";
import { type IsAny } from "../../../lib/types.js";
export type BaseOptionsSchema = z.ZodTypeAny;
export type DefineOptionsSchemaOptions = {
    zod: typeof z;
};
export type DefineOptionsSchema<Schema extends z.ZodTypeAny> = (options: DefineOptionsSchemaOptions) => Schema;
export type DefineOptionsSchemaOutput<Schema extends z.ZodType> = IsAny<Schema> extends true ? {
    typePrefix?: string | undefined;
} : z.infer<Schema> & {
    typePrefix?: string | undefined;
};
export declare class ConnectorOptionsSchema<Schema extends BaseOptionsSchema> {
    private defineSchema;
    private builtSchema;
    constructor(schemaDefiner: DefineOptionsSchema<Schema>);
    buildSchema(): Schema;
    private builtInOptionsSchema;
    validate(options: any, connectorSlug: string): void;
}
//# sourceMappingURL=options.d.ts.map