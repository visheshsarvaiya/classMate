import { PluginOptions, SourceNodesArgs } from "@netlify/content-engine";
import * as CSITypes from "@stackbit/types";
import { InstanceID } from "./utils/instance-id.js";
import { APIPromiseName, ConnectorConfig, NetlifyConnector, PlatformType } from "./sdk.js";
import { ModelBuilder } from "./model/builder.js";
import { CSIBridgeAPI } from "./bridge/csi-module-bridge.js";
import { SourcePluginBridgeAPI } from "./bridge/source-plugin-bridge.js";
export declare class ConfiguredNetlifyConnector {
    private NetlifyConnector;
    instanceID: InstanceID;
    sourcePluginAPI: SourcePluginBridgeAPI;
    csiModuleAPI: CSIBridgeAPI;
    /**
     * As of January 24, 2023:
     *
     * Knowledge of what platform the connector is running on changes the logic that happens as part of Netlify Create.
     * As there might be other platforms that also need to change their behaviour based on the environment that the connector
     * is running in the future, we're storing this information in the connector instance.
     *
     */
    platform: PlatformType;
    private runtimeSupportsCreate;
    warmCacheKey: string;
    ModelBuilder: ModelBuilder;
    nodesApi: NodesApi;
    private createApi;
    optionsValues: Record<string, any>;
    initState: Record<string, any>;
    syncCount: number;
    slug: string;
    config: ConnectorConfig<any>;
    constructor({ NetlifyConnector, instanceID, config, slug, options, }: {
        NetlifyConnector: NetlifyConnector<any, any, any>;
        instanceID: InstanceID;
        slug: string;
        options: Record<string, any>;
        config: ConnectorConfig<any>;
    });
    createId(id: string, modelName: string): string;
    getAPIPromises(apiName: APIPromiseName): import("./utils/api-promises.js").APIPromiseGroup;
    get proxiedSchemas(): import("./sdk.js").ProxiedSchemaFn<any, any>[];
    get definedImplementations(): import("./sdk.js").DefinedImplementations<any, any, any>;
    get isUsingUnifiedAPI(): boolean;
    get supports(): import("./sdk.js").ConnectorSupports;
    shouldHandleCreateSupport(): boolean;
    setRuntimeSupportsCreate(): void;
    setOptionsValues(options: Record<string, any>): Promise<unknown> | undefined;
    setInitState(state: Record<string, any>): void;
    private getLmdbDatastore;
    restoreAllDocuments(): Promise<CSITypes.Document<unknown>[]>;
    restoreAllAssets(): Promise<CSITypes.Asset<unknown>[]>;
    restoreAllScheduledActions(): Promise<CSITypes.ScheduledAction[]>;
    sync({ actions, cache }: SourceNodesArgs): Promise<void>;
    get typePrefix(): string;
    _buildDefinedModels(cache: SourceNodesArgs["cache"]): Promise<{
        sdl: string;
    }>;
    _initialize(): Promise<void>;
}
export type NodesApi = Partial<SourceNodesArgs["actions"] & {
    getNode: SourceNodesArgs["getNode"];
    cache: SourceNodesArgs["cache"];
    pluginOptions: PluginOptions;
    webhookBody: Record<string, any>;
    dispatch: SourceNodesArgs["store"]["dispatch"];
}>;
declare global {
    var __globalConnectorInstances: Map<string, ConfiguredNetlifyConnector>;
}
export declare function setGlobalConnectorInstance(connectorName: string, instanceID: string, connectorInstance: ConfiguredNetlifyConnector): void;
export declare function getGlobalConnectorInstance(connectorName: string, instanceID: string): ConfiguredNetlifyConnector | undefined;
//# sourceMappingURL=connector-instance.d.ts.map