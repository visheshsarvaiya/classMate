import { type Cache, type ContentSourceInterface, type Locale } from "@stackbit/types";
import { type NonUndefined } from "utility-types";
import { type ConfiguredNetlifyConnector } from "../connector-instance.js";
import { BridgePluginAPI } from "./bridge.js";
type CSIArgs = ExtractFirstArgFrom<ContentSourceInterface, "hasAccess" | "uploadAsset" | "updateDocument" | "createDocument" | "deleteDocument" | "publishDocuments" | "init" | "cancelScheduledAction" | "createScheduledAction" | "updateScheduledAction">;
export declare class CSIBridgeAPI extends BridgePluginAPI {
    cache?: Cache | undefined;
    constructor(configuredConnector: ConfiguredNetlifyConnector);
    get stackbitCache(): Cache;
    init({ cache }: CSIArgs["init"]): Promise<void>;
    hasAccess(args: CSIArgs["hasAccess"]): Promise<any>;
    uploadAsset(args: CSIArgs["uploadAsset"]): Promise<import("@stackbit/types").Asset<unknown>>;
    updateDocument(args: CSIArgs["updateDocument"]): Promise<void>;
    createDocument(args: CSIArgs["createDocument"]): Promise<{
        documentId: string;
    }>;
    deleteDocument(args: CSIArgs["deleteDocument"]): Promise<void>;
    publishDocuments(args: CSIArgs["publishDocuments"]): Promise<void>;
    getModels(): Promise<(import("@stackbit/types").ObjectModel<unknown> | import("@stackbit/types").PageModel<unknown> | import("@stackbit/types").DataModel<unknown>)[] | undefined>;
    getLocales(): Locale[];
    getProjectManageUrl(): string;
    private connectSyncFinished;
    getDocuments(): Promise<import("@stackbit/types").Document<unknown>[]>;
    getAssets(): Promise<import("@stackbit/types").Asset<unknown>[]>;
    updateScheduledAction({ userContext, ...data }: CSIArgs["updateScheduledAction"]): ReturnType<NonUndefined<ContentSourceInterface["updateScheduledAction"]>>;
    cancelScheduledAction({ userContext, ...data }: CSIArgs["cancelScheduledAction"]): ReturnType<NonUndefined<ContentSourceInterface["cancelScheduledAction"]>>;
    createScheduledAction({ userContext, ...data }: CSIArgs["createScheduledAction"]): ReturnType<NonUndefined<ContentSourceInterface["createScheduledAction"]>>;
    getScheduledActions(): ReturnType<NonUndefined<ContentSourceInterface["getScheduledActions"]>>;
}
type ExtractFirstArg<F> = F extends (...args: infer Params) => any ? Params[0] : never;
type ExtractFirstArgFrom<T, K extends keyof T> = {
    [P in K]-?: ExtractFirstArg<T[P]>;
};
export {};
//# sourceMappingURL=csi-module-bridge.d.ts.map