import { ResolvedModelField } from "../definition.js";
import { ModelTransformer, ModelTransformerImplementation, ModelTreeContext } from "../transformer.js";
import { Editor } from "../types.js";
export declare class CrossReferenceTransfromer extends ModelTransformer implements ModelTransformerImplementation {
    parseVisitedInputList(input: unknown, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    parseVisitedInputSingle(visited: unknown): unknown;
    toConnectDefinition(): string;
    toConnectSingleFieldDefinition(modelField: ResolvedModelField): string;
    toConnectListFieldDefinition(modelField: ResolvedModelField): string;
    toCreateDefinition(): null;
    toCreateListFieldDefinition(field: ResolvedModelField): Editor.FieldList;
    toCreateSingleFieldDefinition(field: ResolvedModelField): Editor.FieldCrossReference;
    private crossReferenceValuesToEditorModelsProperty;
    toConnectSingleFieldValue(input: any, _field: ResolvedModelField, treeContext: ModelTreeContext): any;
    toConnectListFieldValue(modelFieldValue: unknown, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    toCreateListFieldValue(modelFieldValue: unknown, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    toCreateSingleFieldValue(input: any, _field: ResolvedModelField, treeContext: ModelTreeContext): Editor.DocumentCrossReferenceField & {
        value: ReturnType<CrossReferenceTransfromer["getCrossReferenceFieldValues"]>;
    };
    private getCrossReferenceFieldValues;
}
//# sourceMappingURL=cross-reference.d.ts.map