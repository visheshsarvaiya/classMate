import { findSourceMap } from "node:module";
import path from "path";
export class ModelError extends Error {
    constructor(message, options) {
        super(`${getClosestUserCodeUrl(true)}\n${message}\n`, options);
        this.name = "ModelError";
    }
}
function getClosestUserCodeUrl(shouldCheck) {
    if (!shouldCheck) {
        return undefined;
    }
    const oldPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = function (_, stack) {
        return stack;
    };
    const stack = new Error().stack;
    Error.prepareStackTrace = oldPrepareStackTrace;
    if (stack !== null && typeof stack === "object") {
        // @ts-ignore stack is array-like and can be filtered. types are wrong
        const relevantStack = stack.filter((callSite) => {
            const fileName = callSite.getFileName();
            return (fileName &&
                !fileName.includes(`node_modules`) &&
                !fileName.includes(`connect/model/walker`) &&
                !fileName.includes(`connect/model/builder`) &&
                !fileName.includes(`connect/model/utils`) &&
                !fileName.includes(`connect/model/error`) &&
                !fileName.includes(`connect/model/definition`));
        });
        if (relevantStack.length === 0) {
            return ``;
        }
        // 0 contains the first relevant file location
        // because it's ordered from most to least recent call
        // and node_modules are filtered out
        const userCaller = relevantStack[0];
        const sourceMap = findSourceMap(path.join(process.cwd(), ".ntli", "connector", "index.js"));
        if (sourceMap) {
            const originalPosition = sourceMap.findEntry(userCaller.getLineNumber(), userCaller.getColumnNumber());
            if (originalPosition &&
                "originalSource" in originalPosition &&
                "originalLine" in originalPosition &&
                "originalColumn" in originalPosition) {
                const { originalSource, originalLine, originalColumn } = originalPosition;
                const filePath = path.relative(process.cwd(), originalSource.replace(`file://`, ``));
                return `\n  -> in file ${filePath}:${originalLine}:${originalColumn}`;
            }
        }
        return userCaller
            ? `\n  -> in file ${userCaller
                .getFileName()
                .replace(process.cwd(), ``)}:${userCaller.getLineNumber()}:${userCaller.getColumnNumber()}`
            : ``;
    }
}
//# sourceMappingURL=error.js.map