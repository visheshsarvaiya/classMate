import { ModelTransformerImplementation, ModelTreeContext } from "../../transformer.js";
import { ScalarBaseTransformer } from "../scalar.js";
import { Editor } from "../../types.js";
import { ResolvedModelField } from "../../definition.js";
export declare class StringTransformer extends ScalarBaseTransformer implements ModelTransformerImplementation {
    protected get visualEditorFieldType(): "string" | "url" | "text" | "slug" | "markdown" | "html" | "color";
    toCreateSingleFieldDefinition(modelField: ResolvedModelField): null | Editor.FieldString | Editor.FieldUrl | Editor.FieldText | Editor.FieldSlug | Editor.FieldMarkdown | Editor.FieldHtml | Editor.FieldColor;
    toCreateListFieldDefinition(modelField: ResolvedModelField): Editor.FieldList;
    parseVisitedInputSingle(input: unknown, field: ResolvedModelField, treeContext: ModelTreeContext): string | null;
}
export declare class MarkdownTransformer extends StringTransformer {
    isVisualEditorType: boolean;
    protected get visualEditorFieldType(): "markdown";
}
export declare class UrlTransformer extends StringTransformer {
    isVisualEditorType: boolean;
    protected get visualEditorFieldType(): "url";
}
export declare class TextTransformer extends StringTransformer {
    isVisualEditorType: boolean;
    protected get visualEditorFieldType(): "text";
}
export declare class SlugTransformer extends StringTransformer {
    isVisualEditorType: boolean;
    protected get visualEditorFieldType(): "slug";
}
export declare class HtmlTransformer extends StringTransformer {
    isVisualEditorType: boolean;
    protected get visualEditorFieldType(): "html";
}
export declare class ColorTransformer extends StringTransformer {
    isVisualEditorType: boolean;
    protected get visualEditorFieldType(): "color";
}
export declare class IDTransformer extends StringTransformer {
    toCreateSingleFieldValue(input: string): string;
    toCreateSingleFieldDefinition(): null;
    protected get visualEditorFieldType(): "string";
}
//# sourceMappingURL=string.d.ts.map