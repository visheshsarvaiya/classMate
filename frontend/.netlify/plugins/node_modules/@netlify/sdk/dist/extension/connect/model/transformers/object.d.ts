import { RawNodeObject, ResolvedModelField } from "../definition.js";
import { ModelTransformer, ModelTransformerImplementation, ModelTreeContext } from "../transformer.js";
import { Editor } from "../types.js";
export declare class ObjectTransformer extends ModelTransformer implements ModelTransformerImplementation {
    toConnectDefinition(): string;
    toConnectSingleFieldDefinition(field: ResolvedModelField): string;
    toConnectListFieldDefinition(field: ResolvedModelField): string;
    toCreateDefinition(): null | Editor.ObjectModel<unknown>;
    toCreateListFieldDefinition(field: ResolvedModelField): Editor.FieldList;
    toCreateSingleFieldDefinition(field: ResolvedModelField): Editor.FieldObject | Editor.FieldModel | Editor.FieldEnum;
    toFieldDefinitionProperties(field: ResolvedModelField): Editor.FieldObjectProps | Editor.FieldModelProps | Editor.FieldEnumProps;
    parseVisitedInputList(input: unknown, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    parseVisitedInputSingle(visited: unknown, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    toConnectListFieldValue(input: unknown, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    toConnectSingleFieldValue(input: object, _field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    toCreateListFieldValue(modelFieldValue: unknown, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    toCreateSingleFieldValue(input: object, _field: ResolvedModelField, treeContext: ModelTreeContext): Editor.DocumentModelFieldNonLocalized;
    toCreateSingleFieldValueLocalized(input: Record<string, object>, _coersionField: ResolvedModelField, treeContext: ModelTreeContext): Editor.DocumentModelFieldLocalized;
    private toInsertedObject;
    private getCacheField;
    getCacheValueForRuntimeObject(coercedValue: RawNodeObject): string | null;
}
//# sourceMappingURL=object.d.ts.map