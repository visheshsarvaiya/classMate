import { omitByUndefined } from "../../../utils/omit-by-undefined.js";
import { ModelError } from "../../error.js";
import { ScalarBaseTransformer } from "../scalar.js";
export class DateTransformer extends ScalarBaseTransformer {
    parseVisitedInputSingle(input) {
        if (typeof input === `string`)
            return input;
        if (input instanceof Date) {
            return input.toISOString();
        }
        throw new ModelError(`Only strings or Date objects may be passed as input values for Date fields. Found ${typeof input}`);
    }
    toCreateSingleFieldDefinition(modelField) {
        return omitByUndefined({
            ...this.modelFieldToSharedCreateProperties(modelField),
            type: this.visualEditorFieldType,
        });
    }
    toCreateListFieldDefinition(modelField) {
        return omitByUndefined({
            ...this.modelFieldToSharedCreateProperties(modelField),
            type: "list",
            items: {
                type: this.visualEditorFieldType,
            },
        });
    }
    get visualEditorFieldType() {
        return "date";
    }
}
//# sourceMappingURL=date.js.map