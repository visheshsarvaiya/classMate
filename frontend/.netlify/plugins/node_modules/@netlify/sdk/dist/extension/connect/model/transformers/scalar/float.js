import { ModelError } from "../../error.js";
import { omitByUndefined } from "../../../utils/omit-by-undefined.js";
import { ScalarBaseTransformer } from "../scalar.js";
export class FloatTransformer extends ScalarBaseTransformer {
    toCreateSingleFieldDefinition(modelField) {
        return omitByUndefined({
            ...this.modelFieldToSharedCreateProperties(modelField),
            ...this.modelFieldToSharedCreateNumberProperties(modelField),
            type: this.visualEditorFieldType,
            subtype: "float",
        });
    }
    toCreateListFieldDefinition(modelField) {
        return omitByUndefined({
            ...this.modelFieldToSharedCreateProperties(modelField),
            type: "list",
            items: {
                ...this.modelFieldToSharedCreateNumberProperties(modelField),
                type: this.visualEditorFieldType,
                subtype: "float",
            },
        });
    }
    parseVisitedInputSingle(input, field, treeContext) {
        const isNumber = typeof input === `number`;
        if (!input && !field.required && !isNumber) {
            return null;
        }
        const castToNumber = Number(input);
        if (!isNumber || isNaN(castToNumber)) {
            throw new ModelError(`Input data for field ${field.name} at input path ${treeContext.path.join(`.`)} is not a float but should be. Received ${typeof input}.\n\n${JSON.stringify(input, null, 2)}`);
        }
        return castToNumber || input;
    }
    get visualEditorFieldType() {
        return "number";
    }
}
//# sourceMappingURL=float.js.map