import { ResolvedModelField } from "../definition.js";
import { ModelTransformer, ModelTransformerImplementation, ModelTreeContext } from "../transformer.js";
import { Editor } from "../types.js";
export declare class DocumentTransformer extends ModelTransformer implements ModelTransformerImplementation {
    parseVisitedInputList(input: unknown, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    parseVisitedInputSingle(visited: any, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    private parseRelationshipField;
    toConnectDefinition(): string;
    toConnectSingleFieldDefinition(modelField: ResolvedModelField): string;
    toConnectListFieldDefinition(modelField: ResolvedModelField): string;
    toCreateDefinition(): null | Editor.PageModel<unknown> | Editor.DataModel<unknown>;
    toCreateListFieldDefinition(field: ResolvedModelField): null | Editor.FieldList;
    toCreateSingleFieldDefinition(field: ResolvedModelField): Editor.FieldReference | Editor.FieldImage | Editor.FieldFile;
    private getAssetEditorType;
    toConnectSingleFieldValue(input: any, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    toConnectListFieldValue(modelFieldValue: any, field: ResolvedModelField): unknown;
    toCreateSingleFieldValue(input: any, field: ResolvedModelField, treeContext: ModelTreeContext): unknown;
    toCreateSingleFieldValueLocalized(input: Record<string, any>, field: ResolvedModelField, treeContext: ModelTreeContext): Editor.DocumentReferenceFieldLocalized;
    toCreateListFieldValue(input: any): Editor.DocumentListField;
    private toInsertedDocument;
    private setNodeId;
    private getCacheField;
    private getCacheValue;
}
//# sourceMappingURL=document.d.ts.map