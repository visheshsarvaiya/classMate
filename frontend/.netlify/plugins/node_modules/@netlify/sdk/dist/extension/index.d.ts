import { Handler } from "@netlify/functions";
import { IntegrationHandler, FunctionHandler } from "@netlify/integrations";
import { z } from "zod";
import { NetlifyPluginConstants } from "@netlify/build";
import { type NetlifySDKContext, BuildHookType, BuildHookWithContext, BuildHookOptions, BuildHookFunction } from "../index.js";
import { BaseConnectorLocalDevOptions, ConnectorBaseOptionsSchema, ConnectorContextState, NetlifyConnector, AddConnectorInput } from "./connect/sdk.js";
import type { BuildContextHandler, BuildHooks, BuildHooksOptions, EdgeFunctionsOptions, EdgeFunctionsSettings, Handlers, NetlifyExtensionProps, FunctionsOptions, FunctionsSettings, Wrappers } from "./types.js";
import { ConfigurationResponse } from "@netlify/sdk--extension-api-client";
export declare class NetlifyExtension<SiteConfigSchema extends z.ZodSchema = z.ZodUnknown, TeamConfigSchema extends z.ZodSchema = z.ZodUnknown, BuildContext extends z.ZodSchema = z.ZodUnknown, BuildConfigSchema extends z.ZodSchema = z.ZodUnknown, ConnectorConfigSchema extends z.ZodSchema = z.ZodUnknown> {
    private _buildHooks;
    private _wrappers;
    private _handlers;
    private _netlifyConnectPlugin?;
    _buildConfigurationSchema?: BuildConfigSchema;
    _buildContextSchema?: BuildContext;
    _siteConfigSchema?: SiteConfigSchema;
    _teamConfigSchema?: TeamConfigSchema;
    _edgeFunctionsSettings?: EdgeFunctionsSettings;
    _functionsSettings?: FunctionsSettings;
    _slug: string;
    _hostSiteId?: string;
    private _buildHooksOptions;
    constructor({ buildConfigSchema, buildContextSchema, siteConfigSchema, teamConfigSchema, }?: NetlifyExtensionProps<BuildConfigSchema, BuildContext, SiteConfigSchema, TeamConfigSchema, ConnectorConfigSchema>);
    get buildSlug(): string;
    /**
     * Used to add a build event handlers to the extension.
     */
    addBuildEventHandler(type: BuildHookType, func: BuildHookWithContext<z.infer<BuildContext>, z.infer<BuildConfigSchema>, z.infer<SiteConfigSchema>, z.infer<TeamConfigSchema>, z.infer<ConnectorConfigSchema>>, options?: BuildHookOptions): void;
    /**
     * Used to add a build context to the extension that can be used in a build hook.
     * @deprecated, use the client passed into build event handlers instead.
     */
    addBuildEventContext(handler: BuildContextHandler<ConfigurationResponse<z.infer<SiteConfigSchema>>, ConfigurationResponse<z.infer<TeamConfigSchema>>, z.infer<BuildContext>, z.infer<ConnectorConfigSchema>>): void;
    /**
     * Used to add an endpoint to the extension.
     */
    addEndpoint(name: string, handler: FunctionHandler<NetlifySDKContext<z.infer<SiteConfigSchema>, z.infer<TeamConfigSchema>>>): void;
    /**
     * Used to add a Wrapper to the extension.
     */
    addWrapper(name: string, handler: IntegrationHandler): void;
    /**
     * The handler to use for the onInstall endpoint.
     */
    onInstall(handler: FunctionHandler<NetlifySDKContext<z.infer<SiteConfigSchema>, z.infer<TeamConfigSchema>>>): void;
    /**
     * The handler to use for the onUninstall endpoint.
     */
    onUninstall(handler: FunctionHandler<NetlifySDKContext<z.infer<SiteConfigSchema>, z.infer<TeamConfigSchema>>>): void;
    /**
     * The handler to use for the onDisconnect endpoint.
     */
    onDisconnect(handler: FunctionHandler<NetlifySDKContext<z.infer<SiteConfigSchema>, z.infer<TeamConfigSchema>>>): void;
    addWebhookHandler(name: string, handler: FunctionHandler<NetlifySDKContext<z.infer<SiteConfigSchema>, z.infer<TeamConfigSchema>>>): void;
    /**
     * Used to inject edge functions into the user's site.
     */
    private injectEdgeFunctions;
    /**
     * Used to inject functions into the user's site.
     */
    private injectFunctions;
    /**
     * Used to add edge functions to the extension. Edge functions added using this method are
     * injected into a user's site whenever the user's site is built.
     *
     * @example
     * ```ts
     * extension.addEdgeFunctions(
     *   "src/edge-functions",
     *   {
     *     prefix: "my_extension",
     *     shouldInjectFunction: ({ name }) => name === "only-inject-this-one",
     *   },
     * );
     * ```
     */
    addEdgeFunctions(path: string, { prefix, shouldInjectFunction }: EdgeFunctionsOptions): void;
    /**
     * Used to add functions to the extension. Functions added using this method are injected into a
     * user's site whenever the user's site is built.
     *
     * @example
     * ```ts
     * extension.addEdgeFunctions(
     *   "src/functions",
     *   {
     *     prefix: "my_extension",
     *     shouldInjectFunction: ({ name }) => name === "only-inject-this-one",
     *   },
     * );
     * ```
     */
    addFunctions(
    /**
     * A path to the directory containing functions. It should be a path relative to your
     * extension's base path, e.g. `src/edge-functions`.
     */
    path: string, { prefix, shouldInjectFunction }: EdgeFunctionsOptions): void;
    addFallbackBuildEventHandlers(): void;
    get buildHooks(): BuildHooks;
    get buildHooksOptions(): BuildHooksOptions;
    get handlers(): Handlers;
    get wrappers(): Wrappers;
    get baseHandler(): Handler;
    /**
     * `addConnector` creates a connector definition and attaches it to the extension definition.
     */
    addConnector<State extends ConnectorContextState, LocalDevOptions extends BaseConnectorLocalDevOptions | BaseConnectorLocalDevOptions[], OptionsSchema extends ConnectorBaseOptionsSchema>(config: AddConnectorInput<State, OptionsSchema, LocalDevOptions>): NetlifyConnector<State, OptionsSchema, LocalDevOptions>;
    get netlifyConnectPlugin(): NetlifyConnector<any, any> | null;
    getBuildConfig({ netlifyConfig }: {
        netlifyConfig: any;
    }): any;
    getBuildEventHandlersToRun({ netlifyConfig, }: {
        netlifyConfig: any;
    }): Record<string, BuildHookFunction>;
}
export declare class NetlifyIntegration<_SiteConfigSchema extends z.ZodSchema = z.ZodUnknown, _TeamConfigSchema extends z.ZodSchema = z.ZodUnknown, _BuildContext extends z.ZodSchema = z.ZodUnknown, _BuildConfigSchema extends z.ZodSchema = z.ZodUnknown, _ConnectorConfigSchema extends z.ZodSchema = z.ZodUnknown> {
    constructor(_input?: NetlifyExtensionProps<_BuildConfigSchema, _BuildContext, _SiteConfigSchema, _TeamConfigSchema, _ConnectorConfigSchema>);
    addBuildEventHandler(_type: BuildHookType, _func: BuildHookWithContext<z.infer<_BuildContext>, z.infer<_BuildConfigSchema>, z.output<_SiteConfigSchema>, z.output<_TeamConfigSchema>, z.output<_ConnectorConfigSchema>>, _options?: BuildHookOptions): void;
    addBuildEventContext(_handler: BuildContextHandler<z.infer<_SiteConfigSchema>, z.infer<_TeamConfigSchema>, z.infer<_BuildContext>, z.infer<_ConnectorConfigSchema>>): void;
    addEndpoint(_name: string, _handler: FunctionHandler<NetlifySDKContext<z.infer<_SiteConfigSchema>, z.infer<_TeamConfigSchema>>>): void;
    addWrapper(_name: string, _handler: IntegrationHandler): void;
    onInstall(_handler: FunctionHandler<NetlifySDKContext<z.infer<_SiteConfigSchema>, z.infer<_TeamConfigSchema>>>): void;
    onUninstall(_handler: FunctionHandler<NetlifySDKContext<z.infer<_SiteConfigSchema>, z.infer<_TeamConfigSchema>>>): void;
    onDisconnect(_handler: FunctionHandler<NetlifySDKContext<z.infer<_SiteConfigSchema>, z.infer<_TeamConfigSchema>>>): void;
    addWebhookHandler(_name: string, _handler: FunctionHandler<NetlifySDKContext<z.infer<_SiteConfigSchema>, z.infer<_TeamConfigSchema>>>): void;
    injectEdgeFunctions(_constants: NetlifyPluginConstants): void;
    injectFunctions(_constants: NetlifyPluginConstants): void;
    addEdgeFunctions(_path: string, _edgeFunctionsOptions: Omit<EdgeFunctionsOptions, "shouldInjectFunction">): void;
    addFunctions(_path: string, _functionsOptions: Omit<FunctionsOptions, "shouldInjectFunction">): void;
    addFallbackBuildEventHandlers(): void;
    get buildHooks(): void;
    get buildHooksOptions(): void;
    get handlers(): void;
    get wrappers(): void;
    get baseHandler(): Handler;
    addConnector<State extends ConnectorContextState, LocalDevOptions extends BaseConnectorLocalDevOptions | BaseConnectorLocalDevOptions[], OptionsSchema extends ConnectorBaseOptionsSchema>({ defineOptions: _, initState: _b, }: AddConnectorInput<State, OptionsSchema, LocalDevOptions>): NetlifyConnector<State, OptionsSchema, LocalDevOptions>;
    get netlifyConnectPlugin(): NetlifyConnector<any, any> | null;
    getBuildConfig({ netlifyConfig: _ }: {
        netlifyConfig: any;
    }): void;
    getBuildEventHandlersToRun({ netlifyConfig: _, }: {
        netlifyConfig: any;
    }): Record<string, BuildHookFunction>;
}
//# sourceMappingURL=index.d.ts.map