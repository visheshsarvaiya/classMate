import { type APIPromiseName } from "../sdk.js";
import { type InstanceID } from "./instance-id.js";
/**
 * Get the API promises for a given instance and API name
 *
 * API promises are used to synchronize state between the connector and Connect/Create
 *
 * example:
 *
 * // in Connect
 * ```ts
 * const { connect, create } = getAPIPromises('instance-1', 'init', { create: true });
 * const cache = await create.promise; // wait for the create "init" API promise to resolve and return a cache object
 * // do something with the cache then resolve the connect "init" API promise
 * connector.resolve()
 * ```
 *
 * // in Create
 * ```ts
 * const { connect, create } = getAPIPromises('instance-1', 'init', { create: true });
 * // do something then resolve the create "init" API promise
 * create.resolve(cache);
 * // wait for the connect "init" API promise to resolve
 * await connect.promise;
 * ```
 *
 * In this example, both Create/Connect are using the API to synchronize with each other and send data back and forth, even though Connect/Create have no direct relationship to each other. They are simply running in the same process and being controlled by the SDK via promise resolvers
 */
export declare function getAPIPromises(instanceID: InstanceID, apiName: APIPromiseName, shouldHandleCreateSupport: boolean): APIPromiseGroup;
export declare function promiseWithResolvers(): PromiseResolvers;
export type APIPromiseGroup = {
    connect: PromiseResolvers;
    create: PromiseResolvers;
};
export type PromiseResolvers = {
    resolve: (value?: unknown) => void;
    reject: (reason?: any) => void;
    promise: Promise<any> | undefined;
};
//# sourceMappingURL=api-promises.d.ts.map