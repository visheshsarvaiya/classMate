import { ModelDefinition, RawNodeObject, ResolvedModelField } from "./definition.js";
import { ModelTransformer, ModelTreeContext } from "./transformer.js";
type getModelByName = ModelDefinition["getModelByName"];
export type Fields = {
    [fieldName: string]: Field;
};
export type Field = {
    name: string;
    originalName: string;
    typeName: string;
    fields?: Fields;
    required: boolean;
    list: boolean | `required`;
    is: {
        node: boolean;
        object: boolean;
        union: boolean;
        scalar: boolean;
    };
};
export type VisitorState = {
    context: any;
};
export declare class ModelWalker {
    private definition;
    private getModelByName;
    allowedFieldNames: Set<string>;
    constructor({ model, getModelByName, }: {
        model: ModelDefinition;
        transformer?: ModelTransformer;
        getModelByName: getModelByName;
    });
    build(): void;
    private fieldInfoByName;
    get fields(): Fields | undefined;
    visitInputValue(inputValue: any, visitorState: VisitorState): any;
    transformModelValue({ modelValue, field, treeContext, }: {
        modelValue: unknown;
        field: ResolvedModelField;
        treeContext: ModelTreeContext;
    }): RawNodeObject;
    coerceModelValue(modelValue: RawNodeObject, field: ResolvedModelField, path?: string[], visitorState?: VisitorState): RawNodeObject;
    coerceFields(coercedValue: RawNodeObject, path: string[], visitorState: VisitorState): void;
}
export {};
//# sourceMappingURL=walker.d.ts.map