// Copied from Netlify CLI so that we can access the user's auth token
// See: https://github.com/netlify/cli/blob/6f79b80f8c23bd68a14749fd71aa64064de9165b/src/utils/get-global-config.ts
import os from "node:os";
import path from "node:path";
import envPaths from "env-paths";
import { readFile } from "node:fs/promises";
import Configstore from "configstore";
import { v4 as uuidv4 } from "uuid";
const OSBasedPaths = envPaths("netlify", { suffix: "" });
const NETLIFY_HOME = ".netlify";
/**
 * Deprecated method to get netlify's home config - ~/.netlify/...
 * @deprecated
 */
export const getLegacyPathInHome = (paths) => path.join(os.homedir(), NETLIFY_HOME, ...paths);
/**
 * get a global path on the os base path
 */
export const getPathInHome = (paths) => path.join(OSBasedPaths.config, ...paths);
/**
 * get a path inside the project folder "NOT WORKSPACE AWARE"
 */
export const getPathInProject = (paths) => path.join(NETLIFY_HOME, ...paths);
const globalConfigDefaults = {
    /* disable stats from being sent to Netlify */
    telemetryDisabled: false,
    /* cliId */
    cliId: uuidv4(),
};
// Memoise config result so that we only load it once
// @ts-expect-error TS(7034) FIXME: Variable 'configStore' implicitly has type 'any' i... Remove this comment to see the full error message
let configStore;
/**
 * @returns {Promise<Configstore>}
 */
const getGlobalConfig = async function () {
    // @ts-expect-error TS(7005) FIXME: Variable 'configStore' implicitly has an 'any' typ... Remove this comment to see the full error message
    if (!configStore) {
        const configPath = getPathInHome(["config.json"]);
        // Legacy config file in home ~/.netlify/config.json
        const legacyPath = getLegacyPathInHome(["config.json"]);
        let legacyConfig;
        // Read legacy config if exists
        try {
            // @ts-expect-error TS(2345) FIXME: Argument of type 'Buffer' is not assignable to par... Remove this comment to see the full error message
            legacyConfig = JSON.parse(await readFile(legacyPath));
        }
        catch {
            // Do nothing
        }
        // Use legacy config as default values
        const defaults = { ...globalConfigDefaults, ...legacyConfig };
        //@ts-expect-error -- asdsd
        configStore = new Configstore(null, defaults, { configPath });
    }
    return configStore;
};
export const resetConfigCache = () => {
    configStore = undefined;
};
export default getGlobalConfig;
//# sourceMappingURL=get-global-config.js.map