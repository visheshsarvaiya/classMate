import type { NetlifyPluginOptions } from "@netlify/build";
import { NetlifyExtensionBuildClient, NetlifyExtensionClient } from "@netlify/sdk--extension-api-client";
import { ExtensionEndpointFetch } from "utils/extension_endpoint_fetch.js";
export { NetlifyExtensionClient, type NetlifyClient, type Site, type Account, type EnvironmentVariableValue, type EnvironmentVariable, type CreateHookRequest, type BuildHookResponse, } from "@netlify/sdk--extension-api-client";
export { NetlifyExtension, NetlifyIntegration } from "./extension/index.js";
export * from "@netlify/integrations";
export { 
/**
 * @deprecated Install and import directly from the `zod` package instead.
 */
z, } from "zod";
export type BuildHookType = "onPreBuild" | "onBuild" | "onPostBuild" | "onSuccess" | "onError" | "onEnd" | "onPreDev" | "onDev";
export declare const BuildHook: Record<string, BuildHookType>;
export type BuildHookFunction = (options: NetlifyPluginOptions) => Promise<void>;
export type BuildHookWithContext<Context extends Record<string, any> = Record<string, never>, Config extends Record<string, any> = Record<string, never>, SiteConfigSchema = unknown, TeamConfigSchema = unknown, ConnectorConfigSchema = unknown> = (options: {
    buildContext?: Context;
    buildConfig?: Config;
    client: NetlifyExtensionBuildClient<SiteConfigSchema, TeamConfigSchema, ConnectorConfigSchema>;
    extensionEndpointFetch: ExtensionEndpointFetch;
} & Omit<NetlifyPluginOptions, "inputs">) => void | Promise<void>;
export type BuildHookOptions = {
    if: (buildConfig: Record<string, any>) => boolean | undefined;
};
export type NetlifySDKContext<SiteConfiguration = any, TeamConfiguration = any, ConnectorConfiguration = any> = {
    auth: {
        netlifyToken: string | null;
        providerToken: string | null;
        providerTokens: {
            externalId: string;
            token: string;
            connectionId: string;
        }[];
    };
    client: NetlifyExtensionClient<SiteConfiguration, TeamConfiguration, ConnectorConfiguration>;
    user: {
        id: string | null;
    };
    siteId: string | null;
    teamId: string | null;
    hasConnector: boolean;
    hasBuildEventHandler: boolean;
    teamConfig?: TeamConfiguration | null;
    siteConfig?: SiteConfiguration | null;
};
export type { Visitor, FieldVisitor, DefineNodeArgs, DefineUnionArgs, DefineObjectArgs, DefineDocumentArgs, DefineEnumArgs, ModelField, ModelFields, ModelFieldsObject, ModelFieldsArray, ModelDefinition, VisualEditorFieldSettings, VisualEditorObjectSettings, VisualEditorDocumentSettings, } from "./extension/connect/model/definition.js";
export { builtInTypes } from "./extension/connect/model/definition.js";
export type { Define, Models, ModelsIteratorObject, Modeler, ModelerArgs, ModelBuilder, } from "./extension/connect/model/builder.js";
export type { UpdateOperation, UpdateOperationField } from "@stackbit/types";
export { CreateConfig, configureNetlifyCreate, } from "./extension/connect/utils/create-config.js";
export { type Fields, type Field } from "./extension/connect/model/walker.js";
//# sourceMappingURL=index.d.ts.map