/**
 * MaybePromise represents a value that is either of shape T or a promise that resolves to T.
 */
export type MaybePromise<T> = T | PromiseLike<T>;
export type IfAny<T, Y, N> = 0 extends 1 & T ? Y : N;
/**
 * `IsAny` checks is a type is `any`.
 *
 * It can be useful in sort of niche situations where a generic could be `any` and you want to
 * conditionally assign a type in that scenario, e.g.:
 *
 * ```
 * IsAny<MyGeneric> extends true ? SomeDefaultType : SomethingMeaningfulWith<MyGeneric>
 * ```
 *
 * This type gives off big spooky mystery energy and if you find yourself reaching for it, you're
 * almost certainly better off refactoring your code to not need it.
 */
export type IsAny<T> = IfAny<T, true, false>;
//# sourceMappingURL=types.d.ts.map