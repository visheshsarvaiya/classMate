import { z } from "zod";
import { initTRPC } from "@trpc/server";
import {} from "../sdk_context.js";
import { createRequireDataLayerIdPlugin, createRequireTeamIdPlugin, } from "./middleware/main.js";
/**
 * This function creates a tRPC router you can embed into your application router.
 *
 * The tRPC methods exposed by this router can be passed to {@link ConnectedConnectForm}; when you
 * do so, the form will use these methods to automatically query for existing Connect configuration
 * and handle form submissions.
 *
 * @param options
 * @example
 * ```ts
 * // endpoints/trpc.ts
 * import { createConnectRouter } from "@netlify/sdk/ui/functions/trpc";
 * import { ConnectConfigurationSchema } from "../schema/connect.js";
 * import { router } from "./trpc.js";
 *
 * export const appRouter = router({
 *   connect: createConnectRouter({ schema: ConnectConfigurationSchema }),
 *   // ...
 * });
 * ```
 */
export const createConnectRouter = ({ schema: Schema, }) => {
    const requireDataLayerIdPlugin = createRequireDataLayerIdPlugin();
    const requireTeamIdPlugin = createRequireTeamIdPlugin();
    const t = initTRPC
        .context()
        .create();
    return t.router({
        getConfig: t.procedure
            .use(requireTeamIdPlugin)
            .query(async ({ ctx: { configurationId, client, dataLayerId, teamId } }) => {
            if (configurationId === null || dataLayerId === null) {
                return null;
            }
            const data = await client.getConnectConfiguration({
                configurationId,
                dataLayerId,
                teamId,
            });
            if (data === null) {
                return null;
            }
            return {
                config: data.config,
                name: data.name,
                prefix: data.prefix,
            };
        }),
        upsertConfig: t.procedure
            .use(requireDataLayerIdPlugin)
            .use(requireTeamIdPlugin)
            .input(z.object({
            config: Schema,
            name: z.string().trim().min(1),
            prefix: z.string().trim().min(1),
        }))
            .mutation(async ({ ctx: { client, configurationId, dataLayerId, teamId }, input, }) => {
            if (configurationId !== null) {
                await client.updateConnectConfiguration({
                    config: input.config,
                    configurationId,
                    dataLayerId,
                    name: input.name,
                    prefix: input.prefix,
                    teamId,
                });
            }
            else {
                await client.createConnectConfiguration({
                    config: input.config,
                    dataLayerId,
                    name: input.name,
                    prefix: input.prefix,
                    teamId,
                });
            }
        }),
    });
};
//# sourceMappingURL=connect.js.map