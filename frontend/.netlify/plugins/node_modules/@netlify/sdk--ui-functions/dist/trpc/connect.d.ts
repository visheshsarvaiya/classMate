import { z } from "zod";
import { type NetlifySDKContext } from "../sdk_context.js";
export type ConnectRouter<ConnectConfigurationSchema extends z.ZodObject<any>> = ReturnType<typeof createConnectRouter<ConnectConfigurationSchema>>;
export type CreateConnectRouterOptions<ConnectConfigurationSchema extends z.ZodObject<// eslint-disable-next-line @typescript-eslint/no-explicit-any
any>> = {
    /**
     * A Zod schema used to validate your extension's custom configuration options.
     */
    schema: ConnectConfigurationSchema;
};
/**
 * This function creates a tRPC router you can embed into your application router.
 *
 * The tRPC methods exposed by this router can be passed to {@link ConnectedConnectForm}; when you
 * do so, the form will use these methods to automatically query for existing Connect configuration
 * and handle form submissions.
 *
 * @param options
 * @example
 * ```ts
 * // endpoints/trpc.ts
 * import { createConnectRouter } from "@netlify/sdk/ui/functions/trpc";
 * import { ConnectConfigurationSchema } from "../schema/connect.js";
 * import { router } from "./trpc.js";
 *
 * export const appRouter = router({
 *   connect: createConnectRouter({ schema: ConnectConfigurationSchema }),
 *   // ...
 * });
 * ```
 */
export declare const createConnectRouter: <ConnectConfigurationSchema extends z.ZodObject<any>>({ schema: Schema, }: CreateConnectRouterOptions<ConnectConfigurationSchema>) => import("@trpc/server").TRPCBuiltRouter<{
    ctx: NetlifySDKContext<unknown, unknown, z.output<ConnectConfigurationSchema>>;
    meta: object;
    errorShape: import("@trpc/server").TRPCDefaultErrorShape;
    transformer: false;
}, import("@trpc/server").TRPCDecorateCreateRouterOptions<{
    getConfig: import("@trpc/server").TRPCQueryProcedure<{
        input: void;
        output: {
            config: z.output<ConnectConfigurationSchema>;
            name: string | undefined;
            prefix: string | undefined;
        } | null;
        meta: object;
    }>;
    upsertConfig: import("@trpc/server").TRPCMutationProcedure<{
        input: (z.baseObjectInputType<{
            config: ConnectConfigurationSchema;
            name: z.ZodString;
            prefix: z.ZodString;
        }> extends infer T ? { [k in keyof T]: z.baseObjectInputType<{
            config: ConnectConfigurationSchema;
            name: z.ZodString;
            prefix: z.ZodString;
        }>[k]; } : never) extends infer T_1 ? T_1 extends (z.baseObjectInputType<{
            config: ConnectConfigurationSchema;
            name: z.ZodString;
            prefix: z.ZodString;
        }> extends infer T ? { [k in keyof T]: z.baseObjectInputType<{
            config: ConnectConfigurationSchema;
            name: z.ZodString;
            prefix: z.ZodString;
        }>[k]; } : never) ? T_1 extends import("@trpc/server").TRPCUnsetMarker ? void : T_1 : never : never;
        output: void;
        meta: object;
    }>;
}>>;
//# sourceMappingURL=connect.d.ts.map