{"version":3,"file":"ConnectForm.js","sources":["../../../src/components/ConnectForm/ConnectForm.tsx"],"sourcesContent":["import { type DefaultValues } from \"react-hook-form\";\nimport { z, type ZodObject } from \"zod\";\nimport type { SmartFormFieldsMetadata } from \"../SmartForm/common.ts\";\nimport { SmartForm } from \"../SmartForm/SmartForm.js\";\nimport {\n  createCommonDataSourceFieldsMeta,\n  createCommonDataSourceSchema,\n} from \"./common.js\";\n\nexport type ConnectFormProps<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Schema extends ZodObject<any>,\n> = {\n  /**\n   * A set of initial values used to pre-fill the form.\n   */\n  defaultValues?:\n    | DefaultValues<{\n        name?: string | undefined;\n        prefix?: string | undefined;\n        config?: z.output<Schema> | undefined;\n      }>\n    | undefined;\n\n  /**\n   * A zod schema that defines additional metadata for the form fields.\n   */\n  fieldsMeta: SmartFormFieldsMetadata;\n\n  /**\n   * A callback function invoked when a user clicks the \"Save\" button.\n   *\n   * The submit button is not displayed by default; you must pass the `onSubmit` props for it to\n   * appear.\n   */\n  onSubmit?:\n    | ((data: {\n        name: string;\n        prefix: string;\n        config: z.output<Schema>;\n      }) => Promise<void> | void)\n    | undefined;\n\n  /**\n   * A zod schema that defines the shape of the form.\n   *\n   * Only ZodObject, ZodString, ZodBoolean, and ZodNumber are supported at this time.\n   */\n  schema: Schema;\n};\n\n/**\n * A `ConnectForm` wraps a `SmartForm` and adds common fields needed for a data source.\n *\n * For a component that wraps this component and handles form submissions use `ConnectedConnectForm`\n *\n * For an example @see {@link SmartForm}\n */\nexport const ConnectForm = <\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Schema extends ZodObject<any>,\n>({\n  defaultValues,\n  fieldsMeta,\n  onSubmit,\n  schema,\n}: ConnectFormProps<Schema>): JSX.Element => {\n  const mergedSchema = createCommonDataSourceSchema(schema);\n  const mergedFieldsMeta = createCommonDataSourceFieldsMeta(fieldsMeta);\n\n  return (\n    <SmartForm<typeof mergedSchema>\n      // @ts-expect-error(ndhoule): I tried\n      defaultValues={defaultValues}\n      fieldsMeta={mergedFieldsMeta}\n      // @ts-expect-error(ndhoule): I tried\n      onSubmit={onSubmit}\n      schema={mergedSchema}\n    />\n  );\n};\n"],"names":[],"mappings":";;;AA0DO,MAAM,cAAc,CAGzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAA6C;AACrC,QAAA,eAAe,6BAA6B,MAAM;AAClD,QAAA,mBAAmB,iCAAiC,UAAU;AAGlE,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MAEC;AAAA,MACA,YAAY;AAAA,MAEZ;AAAA,MACA,QAAQ;AAAA,IAAA;AAAA,EACV;AAEJ;"}