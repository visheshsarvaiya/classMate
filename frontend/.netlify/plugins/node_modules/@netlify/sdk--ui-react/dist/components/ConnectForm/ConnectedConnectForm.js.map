{"version":3,"file":"ConnectedConnectForm.js","sources":["../../../src/components/ConnectForm/ConnectedConnectForm.tsx"],"sourcesContent":["import type { ConnectRouter } from \"@netlify/sdk--ui-functions/trpc\";\nimport type { RouterLike } from \"@trpc/react-query/shared\";\nimport { useCallback } from \"react\";\nimport { z, type ZodObject } from \"zod\";\nimport { useNetlifySDK } from \"../../use_netlify_sdk.js\";\nimport { Card } from \"../Card/main.js\";\nimport { CardLoader } from \"../CardLoader.js\";\nimport { ConnectForm, type ConnectFormProps } from \"./ConnectForm.js\";\n\nexport type ConnectedConnectFormProps<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Schema extends ZodObject<any>,\n> = Omit<ConnectFormProps<Schema>, \"defaultValues\" | \"onSubmit\"> & {\n  connect: {\n    getConfig: {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      useQuery: Function;\n    };\n    upsertConfig: {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      useMutation: Function;\n    };\n  };\n};\n\n/**\n * ConnectedConnectForm is a Form variant that accepts a schema and automatically constructs a form\n * that collects all the inputs defined in your schema as well as several default Connect fields.\n *\n * When provided with the pre-built tRPC methods installed by {@link createConnectRouter}\n * the form will populate a user's existing configuration values on load and automatically handle\n * form submission.\n *\n * @param props\n * @see createConnectRouter\n */\nexport const ConnectedConnectForm = <\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Schema extends ZodObject<any>,\n>({\n  connect: _connect,\n  ...otherProps\n}: ConnectedConnectFormProps<Schema>) => {\n  const connect = _connect as unknown as RouterLike<ConnectRouter<Schema>>;\n\n  const sdk = useNetlifySDK();\n  const query = connect.getConfig.useQuery(undefined, {\n    enabled:\n      sdk.context.configurationId !== null && sdk.context.dataLayerId !== null,\n  });\n  const mutation = connect.upsertConfig.useMutation({\n    onSuccess: () => {\n      sdk.requestTermination();\n    },\n  });\n\n  const onSubmit = useCallback(\n    async (input: {\n      name: string;\n      prefix: string;\n      config: z.output<Schema>;\n    }): Promise<void> => {\n      await mutation.mutateAsync(\n        input as unknown as Parameters<typeof mutation.mutateAsync>[0],\n      );\n    },\n    [mutation],\n  );\n\n  if (query.isLoading) {\n    return <CardLoader />;\n  }\n\n  if (query.isError) {\n    return <Card>An unexpected error occurred. Please try again.</Card>;\n  }\n\n  return (\n    <ConnectForm\n      defaultValues={\n        query.data as unknown as {\n          name: string;\n          prefix: string;\n          config: z.output<Schema>;\n        }\n      }\n      onSubmit={onSubmit}\n      {...otherProps}\n    />\n  );\n};\n"],"names":[],"mappings":";;;;;;AAoCO,MAAM,uBAAuB,CAGlC;AAAA,EACA,SAAS;AAAA,EACT,GAAG;AACL,MAAyC;AACvC,QAAM,UAAU;AAEhB,QAAM,MAAM,cAAc;AAC1B,QAAM,QAAQ,QAAQ,UAAU,SAAS,QAAW;AAAA,IAClD,SACE,IAAI,QAAQ,oBAAoB,QAAQ,IAAI,QAAQ,gBAAgB;AAAA,EAAA,CACvE;AACK,QAAA,WAAW,QAAQ,aAAa,YAAY;AAAA,IAChD,WAAW,MAAM;AACf,UAAI,mBAAmB;AAAA,IAAA;AAAA,EACzB,CACD;AAED,QAAM,WAAW;AAAA,IACf,OAAO,UAIc;AACnB,YAAM,SAAS;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAAA,IACA,CAAC,QAAQ;AAAA,EACX;AAEA,MAAI,MAAM,WAAW;AACnB,+BAAQ,YAAW,EAAA;AAAA,EAAA;AAGrB,MAAI,MAAM,SAAS;AACV,WAAA,oBAAC,QAAK,UAA+C,kDAAA,CAAA;AAAA,EAAA;AAI5D,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,eACE,MAAM;AAAA,MAMR;AAAA,MACC,GAAG;AAAA,IAAA;AAAA,EACN;AAEJ;"}