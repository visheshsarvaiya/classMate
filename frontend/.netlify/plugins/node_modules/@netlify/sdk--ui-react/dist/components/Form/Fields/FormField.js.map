{"version":3,"file":"FormField.js","sources":["../../../../src/components/Form/Fields/FormField.tsx"],"sourcesContent":["import { Controller, type Path, useFormContext } from \"react-hook-form\";\nimport BaseFormField from \"../../vendor/FormField.jsx\";\n\nexport type FormFieldProps = {\n  /**\n   * The type of input field to render.\n   *\n   * @default text\n   */\n  type?: \"text\" | \"textarea\" | \"number\" | undefined;\n\n  /**\n   * An error message that overrides errors produced by built-in validation.\n   */\n  error?: { message: string } | undefined;\n\n  accessibleCopyName?: string | undefined;\n  ariaLabelText?: string | undefined;\n  className?: string | undefined;\n  disabled?: boolean | undefined;\n  helpText?: React.ReactNode | undefined;\n  label?: string | undefined;\n  labelPosition?: \"top\" | \"left\" | undefined;\n  name: string;\n  placeholder?: string | number | undefined;\n  readonly?: boolean | undefined;\n  required?: boolean | undefined;\n};\n\n/**\n * <!-- TODO(ndhoule): Document me -->\n *\n * @internal\n */\nexport const FormField = <FieldValues extends Record<string, unknown>>({\n  labelPosition = \"top\",\n  type = \"text\",\n  name,\n  error,\n  ...otherProps\n}: FormFieldProps) => {\n  const { control } = useFormContext<FieldValues>();\n\n  return (\n    <Controller<FieldValues>\n      name={name as unknown as Path<FieldValues>}\n      control={control}\n      render={({ fieldState, field: { value, onChange, ...fieldProps } }) => {\n        let transformedValue: unknown;\n        if (type === \"number\") {\n          if (value == null) {\n            transformedValue = value;\n          } else if (Number.isNaN(value) || value === 0) {\n            transformedValue = \"\";\n          } else {\n            transformedValue = value.toString();\n          }\n        } else {\n          transformedValue = value;\n        }\n\n        return (\n          <BaseFormField\n            {...otherProps}\n            controlled\n            error={error?.message ?? fieldState.error?.message}\n            leftLabel={labelPosition === \"left\"}\n            type={type}\n            {...fieldProps}\n            onChange={(e) => {\n              if (type === \"number\") {\n                const output = Number.parseInt(e.target.value, 10);\n                onChange(Number.isNaN(output) ? 0 : output);\n              } else {\n                onChange(e.target.value);\n              }\n            }}\n            value={transformedValue}\n          />\n        );\n      }}\n    />\n  );\n};\n"],"names":["BaseFormField"],"mappings":";;;AAkCO,MAAM,YAAY,CAA8C;AAAA,EACrE,gBAAgB;AAAA,EAChB,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAAsB;AACd,QAAA,EAAE,QAAQ,IAAI,eAA4B;AAG9C,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA,QAAQ,CAAC,EAAE,YAAY,OAAO,EAAE,OAAO,UAAU,GAAG,WAAW,QAAQ;;AACjE,YAAA;AACJ,YAAI,SAAS,UAAU;AACrB,cAAI,SAAS,MAAM;AACE,+BAAA;AAAA,UAAA,WACV,OAAO,MAAM,KAAK,KAAK,UAAU,GAAG;AAC1B,+BAAA;AAAA,UAAA,OACd;AACL,+BAAmB,MAAM,SAAS;AAAA,UAAA;AAAA,QACpC,OACK;AACc,6BAAA;AAAA,QAAA;AAInB,eAAA;AAAA,UAACA;AAAAA,UAAA;AAAA,YACE,GAAG;AAAA,YACJ,YAAU;AAAA,YACV,QAAO,+BAAO,cAAW,gBAAW,UAAX,mBAAkB;AAAA,YAC3C,WAAW,kBAAkB;AAAA,YAC7B;AAAA,YACC,GAAG;AAAA,YACJ,UAAU,CAAC,MAAM;AACf,kBAAI,SAAS,UAAU;AACrB,sBAAM,SAAS,OAAO,SAAS,EAAE,OAAO,OAAO,EAAE;AACjD,yBAAS,OAAO,MAAM,MAAM,IAAI,IAAI,MAAM;AAAA,cAAA,OACrC;AACI,yBAAA,EAAE,OAAO,KAAK;AAAA,cAAA;AAAA,YAE3B;AAAA,YACA,OAAO;AAAA,UAAA;AAAA,QACT;AAAA,MAAA;AAAA,IAEJ;AAAA,EACF;AAEJ;"}