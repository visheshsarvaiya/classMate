import { ZodObject } from 'zod';
import { SmartFormFieldsMetadata } from '../SmartForm/common.js';

import * as z from "zod";
export declare const createCommonDataSourceSchema: <Schema extends ZodObject<any>>(configSchema: Schema) => ZodObject<{
    name: z.ZodString;
    prefix: z.ZodString;
    config: Schema;
}, "strip", z.ZodTypeAny, z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    name: z.ZodString;
    prefix: z.ZodString;
    config: Schema;
}>, any> extends infer T ? { [k in keyof T]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    name: z.ZodString;
    prefix: z.ZodString;
    config: Schema;
}>, any>[k]; } : never, z.baseObjectInputType<{
    name: z.ZodString;
    prefix: z.ZodString;
    config: Schema;
}> extends infer T_1 ? { [k_1 in keyof T_1]: z.baseObjectInputType<{
    name: z.ZodString;
    prefix: z.ZodString;
    config: Schema;
}>[k_1]; } : never>;
export declare const createCommonDataSourceFieldsMeta: (configFieldsMeta: SmartFormFieldsMetadata) => {
    name: {
        label: string;
        name: string;
    };
    prefix: {
        label: string;
        helpText: string;
    };
    config: SmartFormFieldsMetadata;
};
//# sourceMappingURL=common.d.ts.map