{"version":3,"file":"index.esm-BuArIOt4.js","sources":["../../../node_modules/.pnpm/react-hook-form@7.52.0_react@18.2.0/node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || formState.disabled\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            isValidating: {\n                enumerable: true,\n                get: () => !!get(formState.validatingFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    break;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    break;\n                }\n                else {\n                    iterateFieldsByAction(currentField, action);\n                }\n            }\n            else if (isObject(currentField)) {\n                iterateFieldsByAction(currentField, action);\n            }\n        }\n    }\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        const disabledField = !!(get(_fields, name) &&\n            get(_fields, name)._f &&\n            get(_fields, name)._f.disabled);\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n            isCurrentFieldPristine || disabledField\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    _updateIsValidating([name], true);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    _updateIsValidating([name]);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    fieldValue === get(_formValues, name, fieldValue);\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if ((isBoolean(disabled) && _state.mount) || !!disabled) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n                value: options.value,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? []\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["result","React","name","value","isRadioOrCheckbox","ref"],"mappings":"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","x_google_ignoreList":[0]}