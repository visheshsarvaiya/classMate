"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContentEngineFrameworkVersion = getContentEngineFrameworkVersion;
exports.computeSourcingConfigurationId = computeSourcingConfigurationId;
const fs = __importStar(require("fs-extra"));
const crypto = __importStar(require("crypto"));
const get_plugin_options_string_1 = require("./get-plugin-options-string");
async function getContentEngineFrameworkVersion(dataLayerDirectory) {
    const { version } = require(require.resolve(`@netlify/content-engine/package.json`, {
        paths: [dataLayerDirectory],
    }));
    return `content-engine${version}`;
}
async function computeSourcingConfigurationId(dataLayerDirectory, platformVersion) {
    if (!dataLayerDirectory) {
        throw new Error(`Set the path to the data layer you want to compute the sourcing hash for like so: computeSourcingConfigurationId({ dataLayerDirectory: 'path/to/data-layer' })`);
    }
    const dataLayerDirectoryExists = await fs.pathExists(dataLayerDirectory);
    if (!dataLayerDirectoryExists) {
        throw new Error(`The data layer directory ${dataLayerDirectory} does not exist`);
    }
    const contentEngineVersionString = await getContentEngineFrameworkVersion(dataLayerDirectory);
    const dataLayerConnectorOptionsString = await (0, get_plugin_options_string_1.getConnectorConfigurationOptionsString)(dataLayerDirectory);
    const sourcingConfigurationHashInputs = [
        dataLayerConnectorOptionsString,
        contentEngineVersionString,
    ];
    if (platformVersion) {
        sourcingConfigurationHashInputs.push(platformVersion);
    }
    const sourcingConfigurationHashInputString = sourcingConfigurationHashInputs.join();
    if (process.env.DEBUG_CONTENT_ENGINE_CONFIGURATION_HASH === `true`) {
        console.info({ sourcingConfigurationHashInputString });
        fs.writeFileSync(`/tmp/sourcing-configuration-id-test-site-hash-${Date.now()}.txt`, sourcingConfigurationHashInputString);
    }
    return (crypto
        .createHash("md5")
        .update(sourcingConfigurationHashInputString)
        .digest("hex") +
        // this is for debugging purposes, to easily spot check if distributed services are using the same hashing algorithm
        `-v4`);
}
//# sourceMappingURL=configuration-hash.js.map