import { Span } from "opentracing";
import reporter from "../reporter";
import { IProgram } from "../commands/types";
import { Store, AnyAction } from "redux";
import { IGatsbyState } from "../redux/types";
import { Express } from "express";
type Reporter = typeof reporter;
export interface IMutationAction {
    type: string;
    payload: Array<unknown>;
    resolve?: (result: unknown) => void;
}
export interface IDataLayerContext {
    reporter: Reporter;
    deferNodeMutation?: boolean;
    nodesMutatedDuringQueryRun?: boolean;
    program: IProgram;
    store?: Store<IGatsbyState, AnyAction>;
    parentSpan?: Span;
    webhookBody?: Record<string, unknown>;
    webhookSourcePluginName?: string;
    refresh?: boolean;
    pagesToBuild?: Array<string>;
    pagesToDelete?: Array<string>;
    shouldRunCreatePagesStatefully?: boolean;
}
export interface IBuildContext {
    reporter: Reporter;
    program: IProgram;
    store?: Store<IGatsbyState, AnyAction>;
    parentSpan?: Span;
    webhookBody?: Record<string, unknown>;
    webhookSourcePluginName?: string;
    refresh?: boolean;
    app: Express;
    nodesMutatedDuringQueryRun?: boolean;
    nodesMutatedDuringQueryRunRecompileCount?: number;
    nodeMutationBatch?: Array<IMutationAction>;
    recompiledFiles?: Set<string>;
}
export {};
//# sourceMappingURL=types.d.ts.map