import { ChildProcess } from "child_process";
import { IProgram, IDebugInfo } from "./../commands/types";
export declare const getDebugInfo: (program: IProgram) => IDebugInfo | null;
export declare class ControllableScript {
    process?: ChildProcess;
    private script;
    private debugInfo;
    private shouldPrintLogs;
    isRunning: any;
    constructor(script: any, debugInfo: IDebugInfo | null, options?: {
        printLogs?: false;
    });
    maybeKillZombie(processName: string, directory: string): void;
    start(options?: {
        env?: Record<string, string>;
        directory?: string;
    }): void;
    stop(signal?: NodeJS.Signals | null, code?: number): Promise<void>;
    onMessage(callback: (msg: any) => void): void;
    offMessage(callback: (msg: any) => void): void;
    onExit(callback: (code: number | null, signal: NodeJS.Signals | null) => void): void;
    offExit(callback: (code: number | null, signal: NodeJS.Signals | null) => void): void;
    send(msg: any): void;
}
export declare const exampleImpl: (program: IProgram) => Promise<void>;
//# sourceMappingURL=controllable-script.d.ts.map