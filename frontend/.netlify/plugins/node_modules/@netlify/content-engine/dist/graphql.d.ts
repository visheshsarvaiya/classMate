import graphql from "graphql";
declare const _default: {
    version: string;
    versionInfo: Readonly<{
        major: number;
        minor: number;
        patch: number;
        preReleaseTag: string | null;
    }>;
    graphql: typeof graphql.graphql;
    graphqlSync: typeof graphql.graphqlSync;
    resolveObjMapThunk: typeof graphql.resolveObjMapThunk;
    resolveReadonlyArrayThunk: typeof graphql.resolveReadonlyArrayThunk;
    GraphQLSchema: typeof graphql.GraphQLSchema;
    GraphQLDirective: typeof graphql.GraphQLDirective;
    GraphQLScalarType: typeof graphql.GraphQLScalarType;
    GraphQLObjectType: typeof graphql.GraphQLObjectType;
    GraphQLInterfaceType: typeof graphql.GraphQLInterfaceType;
    GraphQLUnionType: typeof graphql.GraphQLUnionType;
    GraphQLEnumType: typeof graphql.GraphQLEnumType;
    GraphQLInputObjectType: typeof graphql.GraphQLInputObjectType;
    GraphQLList: typeof graphql.GraphQLList;
    GraphQLNonNull: typeof graphql.GraphQLNonNull;
    specifiedScalarTypes: readonly graphql.GraphQLScalarType<unknown, unknown>[];
    GraphQLInt: graphql.GraphQLScalarType<number, number>;
    GraphQLFloat: graphql.GraphQLScalarType<number, number>;
    GraphQLString: graphql.GraphQLScalarType<string, string>;
    GraphQLBoolean: graphql.GraphQLScalarType<boolean, boolean>;
    GraphQLID: graphql.GraphQLScalarType<string, string>;
    GRAPHQL_MAX_INT: 2147483647;
    GRAPHQL_MIN_INT: -2147483648;
    specifiedDirectives: readonly graphql.GraphQLDirective[];
    GraphQLIncludeDirective: graphql.GraphQLDirective;
    GraphQLSkipDirective: graphql.GraphQLDirective;
    GraphQLDeprecatedDirective: graphql.GraphQLDirective;
    GraphQLSpecifiedByDirective: graphql.GraphQLDirective;
    TypeKind: typeof graphql.TypeKind;
    DEFAULT_DEPRECATION_REASON: "No longer supported";
    introspectionTypes: readonly graphql.GraphQLNamedType[];
    __Schema: graphql.GraphQLObjectType<any, any>;
    __Directive: graphql.GraphQLObjectType<any, any>;
    __DirectiveLocation: graphql.GraphQLEnumType;
    __Type: graphql.GraphQLObjectType<any, any>;
    __Field: graphql.GraphQLObjectType<any, any>;
    __InputValue: graphql.GraphQLObjectType<any, any>;
    __EnumValue: graphql.GraphQLObjectType<any, any>;
    __TypeKind: graphql.GraphQLEnumType;
    SchemaMetaFieldDef: graphql.GraphQLField<unknown, unknown, any>;
    TypeMetaFieldDef: graphql.GraphQLField<unknown, unknown, any>;
    TypeNameMetaFieldDef: graphql.GraphQLField<unknown, unknown, any>;
    isSchema: typeof graphql.isSchema;
    isDirective: typeof graphql.isDirective;
    isType: typeof graphql.isType;
    isScalarType: typeof graphql.isScalarType;
    isObjectType: typeof graphql.isObjectType;
    isInterfaceType: typeof graphql.isInterfaceType;
    isUnionType: typeof graphql.isUnionType;
    isEnumType: typeof graphql.isEnumType;
    isInputObjectType: typeof graphql.isInputObjectType;
    isListType: typeof graphql.isListType;
    isNonNullType: typeof graphql.isNonNullType;
    isInputType: typeof graphql.isInputType;
    isOutputType: typeof graphql.isOutputType;
    isLeafType: typeof graphql.isLeafType;
    isCompositeType: typeof graphql.isCompositeType;
    isAbstractType: typeof graphql.isAbstractType;
    isWrappingType: typeof graphql.isWrappingType;
    isNullableType: typeof graphql.isNullableType;
    isNamedType: typeof graphql.isNamedType;
    isRequiredArgument: typeof graphql.isRequiredArgument;
    isRequiredInputField: typeof graphql.isRequiredInputField;
    isSpecifiedScalarType: typeof graphql.isSpecifiedScalarType;
    isIntrospectionType: typeof graphql.isIntrospectionType;
    isSpecifiedDirective: typeof graphql.isSpecifiedDirective;
    assertSchema: typeof graphql.assertSchema;
    assertDirective: typeof graphql.assertDirective;
    assertType: typeof graphql.assertType;
    assertScalarType: typeof graphql.assertScalarType;
    assertObjectType: typeof graphql.assertObjectType;
    assertInterfaceType: typeof graphql.assertInterfaceType;
    assertUnionType: typeof graphql.assertUnionType;
    assertEnumType: typeof graphql.assertEnumType;
    assertInputObjectType: typeof graphql.assertInputObjectType;
    assertListType: typeof graphql.assertListType;
    assertNonNullType: typeof graphql.assertNonNullType;
    assertInputType: typeof graphql.assertInputType;
    assertOutputType: typeof graphql.assertOutputType;
    assertLeafType: typeof graphql.assertLeafType;
    assertCompositeType: typeof graphql.assertCompositeType;
    assertAbstractType: typeof graphql.assertAbstractType;
    assertWrappingType: typeof graphql.assertWrappingType;
    assertNullableType: typeof graphql.assertNullableType;
    assertNamedType: typeof graphql.assertNamedType;
    getNullableType: typeof graphql.getNullableType;
    getNamedType: typeof graphql.getNamedType;
    validateSchema: typeof graphql.validateSchema;
    assertValidSchema: typeof graphql.assertValidSchema;
    assertName: typeof graphql.assertName;
    assertEnumValueName: typeof graphql.assertEnumValueName;
    Token: typeof graphql.Token;
    Source: typeof graphql.Source;
    Location: typeof graphql.Location;
    OperationTypeNode: typeof graphql.OperationTypeNode;
    getLocation: typeof graphql.getLocation;
    printLocation: typeof graphql.printLocation;
    printSourceLocation: typeof graphql.printSourceLocation;
    Lexer: typeof graphql.Lexer;
    TokenKind: typeof graphql.TokenKind;
    parse: typeof graphql.parse;
    parseValue: typeof graphql.parseValue;
    parseConstValue: typeof graphql.parseConstValue;
    parseType: typeof graphql.parseType;
    print: typeof graphql.print;
    visit: typeof graphql.visit;
    visitInParallel: typeof graphql.visitInParallel;
    getVisitFn: typeof graphql.getVisitFn;
    getEnterLeaveForKind: typeof graphql.getEnterLeaveForKind;
    BREAK: unknown;
    Kind: typeof graphql.Kind;
    DirectiveLocation: typeof graphql.DirectiveLocation;
    isDefinitionNode: typeof graphql.isDefinitionNode;
    isExecutableDefinitionNode: typeof graphql.isExecutableDefinitionNode;
    isSelectionNode: typeof graphql.isSelectionNode;
    isValueNode: typeof graphql.isValueNode;
    isConstValueNode: typeof graphql.isConstValueNode;
    isTypeNode: typeof graphql.isTypeNode;
    isTypeSystemDefinitionNode: typeof graphql.isTypeSystemDefinitionNode;
    isTypeDefinitionNode: typeof graphql.isTypeDefinitionNode;
    isTypeSystemExtensionNode: typeof graphql.isTypeSystemExtensionNode;
    isTypeExtensionNode: typeof graphql.isTypeExtensionNode;
    execute: typeof graphql.execute;
    executeSync: typeof graphql.executeSync;
    defaultFieldResolver: graphql.GraphQLFieldResolver<unknown, unknown>;
    defaultTypeResolver: graphql.GraphQLTypeResolver<unknown, unknown>;
    responsePathAsArray: typeof graphql.responsePathAsArray;
    getArgumentValues: typeof graphql.getArgumentValues;
    getVariableValues: typeof graphql.getVariableValues;
    getDirectiveValues: typeof graphql.getDirectiveValues;
    subscribe: typeof graphql.subscribe;
    createSourceEventStream: typeof graphql.createSourceEventStream;
    validate: typeof graphql.validate;
    ValidationContext: typeof graphql.ValidationContext;
    specifiedRules: readonly graphql.ValidationRule[];
    ExecutableDefinitionsRule: typeof graphql.ExecutableDefinitionsRule;
    FieldsOnCorrectTypeRule: typeof graphql.FieldsOnCorrectTypeRule;
    FragmentsOnCompositeTypesRule: typeof graphql.FragmentsOnCompositeTypesRule;
    KnownArgumentNamesRule: typeof graphql.KnownArgumentNamesRule;
    KnownDirectivesRule: typeof graphql.KnownDirectivesRule;
    KnownFragmentNamesRule: typeof graphql.KnownFragmentNamesRule;
    KnownTypeNamesRule: typeof graphql.KnownTypeNamesRule;
    LoneAnonymousOperationRule: typeof graphql.LoneAnonymousOperationRule;
    NoFragmentCyclesRule: typeof graphql.NoFragmentCyclesRule;
    NoUndefinedVariablesRule: typeof graphql.NoUndefinedVariablesRule;
    NoUnusedFragmentsRule: typeof graphql.NoUnusedFragmentsRule;
    NoUnusedVariablesRule: typeof graphql.NoUnusedVariablesRule;
    OverlappingFieldsCanBeMergedRule: typeof graphql.OverlappingFieldsCanBeMergedRule;
    PossibleFragmentSpreadsRule: typeof graphql.PossibleFragmentSpreadsRule;
    ProvidedRequiredArgumentsRule: typeof graphql.ProvidedRequiredArgumentsRule;
    ScalarLeafsRule: typeof graphql.ScalarLeafsRule;
    SingleFieldSubscriptionsRule: typeof graphql.SingleFieldSubscriptionsRule;
    UniqueArgumentNamesRule: typeof graphql.UniqueArgumentNamesRule;
    UniqueDirectivesPerLocationRule: typeof graphql.UniqueDirectivesPerLocationRule;
    UniqueFragmentNamesRule: typeof graphql.UniqueFragmentNamesRule;
    UniqueInputFieldNamesRule: typeof graphql.UniqueInputFieldNamesRule;
    UniqueOperationNamesRule: typeof graphql.UniqueOperationNamesRule;
    UniqueVariableNamesRule: typeof graphql.UniqueVariableNamesRule;
    ValuesOfCorrectTypeRule: typeof graphql.ValuesOfCorrectTypeRule;
    VariablesAreInputTypesRule: typeof graphql.VariablesAreInputTypesRule;
    VariablesInAllowedPositionRule: typeof graphql.VariablesInAllowedPositionRule;
    LoneSchemaDefinitionRule: typeof graphql.LoneSchemaDefinitionRule;
    UniqueOperationTypesRule: typeof graphql.UniqueOperationTypesRule;
    UniqueTypeNamesRule: typeof graphql.UniqueTypeNamesRule;
    UniqueEnumValueNamesRule: typeof graphql.UniqueEnumValueNamesRule;
    UniqueFieldDefinitionNamesRule: typeof graphql.UniqueFieldDefinitionNamesRule;
    UniqueArgumentDefinitionNamesRule: typeof graphql.UniqueArgumentDefinitionNamesRule;
    UniqueDirectiveNamesRule: typeof graphql.UniqueDirectiveNamesRule;
    PossibleTypeExtensionsRule: typeof graphql.PossibleTypeExtensionsRule;
    NoDeprecatedCustomRule: typeof graphql.NoDeprecatedCustomRule;
    NoSchemaIntrospectionCustomRule: typeof graphql.NoSchemaIntrospectionCustomRule;
    GraphQLError: typeof graphql.GraphQLError;
    syntaxError: typeof graphql.syntaxError;
    locatedError: typeof graphql.locatedError;
    printError: typeof graphql.printError;
    formatError: typeof graphql.formatError;
    getIntrospectionQuery: typeof graphql.getIntrospectionQuery;
    getOperationAST: typeof graphql.getOperationAST;
    getOperationRootType: typeof graphql.getOperationRootType;
    introspectionFromSchema: typeof graphql.introspectionFromSchema;
    buildClientSchema: typeof graphql.buildClientSchema;
    buildASTSchema: typeof graphql.buildASTSchema;
    buildSchema: typeof graphql.buildSchema;
    extendSchema: typeof graphql.extendSchema;
    lexicographicSortSchema: typeof graphql.lexicographicSortSchema;
    printSchema: typeof graphql.printSchema;
    printType: typeof graphql.printType;
    printIntrospectionSchema: typeof graphql.printIntrospectionSchema;
    typeFromAST: typeof graphql.typeFromAST;
    valueFromAST: typeof graphql.valueFromAST;
    valueFromASTUntyped: typeof graphql.valueFromASTUntyped;
    astFromValue: typeof graphql.astFromValue;
    TypeInfo: typeof graphql.TypeInfo;
    visitWithTypeInfo: typeof graphql.visitWithTypeInfo;
    coerceInputValue: typeof graphql.coerceInputValue;
    concatAST: typeof graphql.concatAST;
    separateOperations: typeof graphql.separateOperations;
    stripIgnoredCharacters: typeof graphql.stripIgnoredCharacters;
    isEqualType: typeof graphql.isEqualType;
    isTypeSubTypeOf: typeof graphql.isTypeSubTypeOf;
    doTypesOverlap: typeof graphql.doTypesOverlap;
    assertValidName: typeof graphql.assertValidName;
    isValidNameError: typeof graphql.isValidNameError;
    BreakingChangeType: typeof graphql.BreakingChangeType;
    DangerousChangeType: typeof graphql.DangerousChangeType;
    findBreakingChanges: typeof graphql.findBreakingChanges;
    findDangerousChanges: typeof graphql.findDangerousChanges;
    GraphQLJSON: graphql.GraphQLScalarType<unknown, unknown>;
};
export default _default;
export * from "graphql";
//# sourceMappingURL=graphql.d.ts.map