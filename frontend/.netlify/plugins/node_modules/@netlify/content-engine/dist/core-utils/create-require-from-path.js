"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveFromContentEngine = exports.requireFromInstalledGatsbyDist = exports.createRequireFromPath = void 0;
exports.checkIfGatsbyIsOverridden = checkIfGatsbyIsOverridden;
const module_1 = __importDefault(require("module"));
const path_1 = __importDefault(require("path"));
const fallback = (filename) => {
    const mod = new module_1.default(filename);
    mod.filename = filename;
    mod.paths = module_1.default._nodeModulePaths(path_1.default.dirname(filename));
    mod._compile(`module.exports = require;`, filename);
    return mod.exports;
};
// Polyfill Node's `Module.createRequireFromPath` if not present (added in Node v10.12.0).
// XXX(ndhoule): Module.createRequireFromPath is deprecated and was removed in Node v16
exports.createRequireFromPath = module_1.default.createRequire ||
    // @ts-expect-error TS(2339)
    module_1.default.createRequireFromPath ||
    fallback;
let gatsbyIsActuallyContentEngineOverride = false;
function checkIfGatsbyIsOverridden() {
    if (gatsbyIsActuallyContentEngineOverride)
        return true;
    try {
        const requireFromSite = (0, exports.createRequireFromPath)(path_1.default.join(process.cwd() + `/:internal:`));
        const packageJson = requireFromSite(path_1.default.join(`gatsby/package.json`));
        // to support source plugins we use a PNPM override from gatsby -> content-engine
        // but when gatsby is actually installed we want to know. check package.json name to know for sure
        gatsbyIsActuallyContentEngineOverride =
            packageJson?.name === `@netlify/content-engine`;
        return gatsbyIsActuallyContentEngineOverride;
    }
    catch (_e) {
        // gatsby isn't installed
        return false;
    }
}
const requireFromInstalledGatsbyDist = (modulePath) => {
    try {
        const requireFromSite = (0, exports.createRequireFromPath)(path_1.default.join(process.cwd() + `/:internal:`));
        return requireFromSite(path_1.default.join(`gatsby/dist/`, modulePath));
    }
    catch (e) {
        if (!e.message.includes(`Cannot find module`)) {
            throw e;
        }
        return null;
    }
};
exports.requireFromInstalledGatsbyDist = requireFromInstalledGatsbyDist;
const resolveFromContentEngine = (modulePath, rootDir = process.cwd()) => {
    try {
        const requireFromSite = (0, exports.createRequireFromPath)(path_1.default.join(rootDir + `/:internal:`));
        return requireFromSite.resolve(path_1.default.join(`@netlify/content-engine/dist/`, modulePath));
    }
    catch (e) {
        if (!e.message.includes(`Cannot find module`)) {
            throw e;
        }
        return null;
    }
};
exports.resolveFromContentEngine = resolveFromContentEngine;
//# sourceMappingURL=create-require-from-path.js.map