{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/ScrollableChat.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","_error$response","_error$response$data","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","UserBadgeItem","handleFunction","admin","Badge","px","py","cursor","CloseIcon","pl","UserListItem","_hover","background","color","Avatar","mr","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","concat","token","put","chatId","handleRemove","chatName","flexWrap","pb","map","ml","query","get","handleSearch","Spinner","ScrollableChat","ScrollableFeed","display","Tooltip","label","placement","hasArrow","mt","backgroundColor","marginLeft","padding","maxWidth","content","ENDPOINT","socket","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","isTyping","setIsTyping","aiSuggestions","setAiSuggestions","loadingSuggestions","setLoadingSuggestions","selectedChatIdRef","useRef","current","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","io","transports","emit","on","_socket","handleMessageReceived","newMessageReceived","_newMessageReceived$c","incomingChatId","chat","currentChatId","prev","n","off","isGroupChat","toUpperCase","_socket6","overflowY","_response$data","_response$data$candid","_response$data$candid2","_response$data$candid3","_response$data$candid4","_response$data$candid5","recentMessages","slice","prompt","join","process","contents","parts","text","suggestions","candidates","split","filter","line","trim","replace","s","Lottie","options","marginBottom","_socket4","lastTypingTime","Date","now","setTimeout","_socket5","onKeyDown","event","key","_socket2","_data$chat","_socket3","payload","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","sel","handleGroup","userToAdd","includes","API","create","baseURL","withCredentials","MyChats","setLoggedUser","fetchChats","useCallback","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","className","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.a4dccc46.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  \r\n  // Initialize as empty string to avoid uncontrolled -> controlled warning\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response?.data?.message || error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"loginEmail\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"loginPassword\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chatapp\");\r\n      data.append(\"cloud_name\", \"dxdiaf3ot\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/dxdiaf3ot/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Class-Mate\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Text,\r\n  Input,\r\n  FormControl,\r\n  useToast,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport axios from \"axios\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport io from \"socket.io-client\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nlet socket; // single instance\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat, user, notification, setNotification } = ChatState();\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  // === AI Suggestions State ===\r\n  const [aiSuggestions, setAiSuggestions] = useState([]);\r\n  const [loadingSuggestions, setLoadingSuggestions] = useState(false);\r\n\r\n  const toast = useToast();\r\n\r\n  // --- keep latest selectedChatId in a ref to avoid stale closure\r\n  const selectedChatIdRef = useRef(null);\r\n  useEffect(() => {\r\n    selectedChatIdRef.current = selectedChat?._id || null;\r\n  }, [selectedChat]);\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: { preserveAspectRatio: \"xMidYMid slice\" },\r\n  };\r\n\r\n  // === AI Suggestion Function ===\r\n  const fetchAISuggestions = async () => {\r\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\r\n\r\n    if (!apiKey) {\r\n      toast({\r\n        title: \"API Key Missing\",\r\n        description: \"Set your Gemini API key in the .env file\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!messages.length) {\r\n      toast({\r\n        title: \"No chat history\",\r\n        description: \"Start chatting to get AI suggestions\",\r\n        status: \"info\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoadingSuggestions(true);\r\n\r\n      const recentMessages = messages\r\n        .slice(-10)\r\n        .map((m) => `${m.sender.name}: ${m.content}`);\r\n\r\n      const prompt = `Suggest 3 professional but friendly replies for the next message in this conversation:\\n\\n${recentMessages.join(\r\n        \"\\n\"\r\n      )}`;\r\n\r\n      const response = await axios.post(\r\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.REACT_APP_GEMINI_API_KEY}`,\r\n        {\r\n          contents: [{ parts: [{ text: prompt }] }],\r\n        }\r\n      );\r\n\r\n      const aiText =\r\n        response.data?.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\r\n\r\n      const suggestions = aiText\r\n        .split(\"\\n\")\r\n        .filter((line) => line.trim() !== \"\")\r\n        .map((line) => line.replace(/^\\d+\\.\\s*/, \"\").trim());\r\n\r\n      setAiSuggestions(suggestions);\r\n    } catch (error) {\r\n      console.error(\"AI Suggestion Error:\", error.response || error);\r\n      toast({\r\n        title: \"AI Error\",\r\n        description: \"Failed to fetch AI suggestions\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } finally {\r\n      setLoadingSuggestions(false);\r\n    }\r\n  };\r\n\r\n  // === Setup Socket Connection (single connect) ===\r\n  useEffect(() => {\r\n    if (!socket) {\r\n      socket = io(ENDPOINT, { transports: [\"websocket\"] });\r\n      socket.emit(\"setup\", user);\r\n      socket.on(\"connected\", () => setSocketConnected(true));\r\n      socket.on(\"typing\", () => setIsTyping(true));\r\n      socket.on(\"stop typing\", () => setIsTyping(false));\r\n    }\r\n    return () => {\r\n      // don't disconnect globally on unmount of this component if app reuses socket elsewhere\r\n      // If this is the only socket user, uncomment next line:\r\n      // socket?.disconnect();\r\n    };\r\n  }, [user]);\r\n\r\n  // === Fetch Messages for Selected Chat ===\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      if (!selectedChat?._id) return;\r\n\r\n      try {\r\n        setLoading(true);\r\n        const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n        const { data } = await axios.get(\r\n          `${ENDPOINT}/api/message/${selectedChat._id}`,\r\n          config\r\n        );\r\n        setMessages(data);\r\n        setLoading(false);\r\n\r\n        // join room for this chat\r\n        socket?.emit(\"join chat\", selectedChat._id);\r\n      } catch (error) {\r\n        console.error(\"Error fetching messages:\", error.response || error);\r\n        setLoading(false);\r\n        toast({\r\n          title: \"Error Occurred!\",\r\n          description: \"Failed to load messages\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    };\r\n\r\n    // clear old messages when switching chats (optional but helps UI)\r\n    setMessages([]);\r\n    fetchMessages();\r\n  }, [selectedChat, user, toast]);\r\n\r\n  // === Send Message ===\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage.trim() !== \"\") {\r\n      if (!selectedChatIdRef.current) return;\r\n\r\n      socket?.emit(\"stop typing\", selectedChatIdRef.current);\r\n\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n\r\n        const payload = {\r\n          content: newMessage,\r\n          chatId: selectedChatIdRef.current,\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n          `${ENDPOINT}/api/message`,\r\n          payload,\r\n          config\r\n        );\r\n\r\n        setNewMessage(\"\");\r\n\r\n        // same chat? push locally; else let notification handle it\r\n        if (\r\n          data?.chat?._id &&\r\n          data.chat._id === selectedChatIdRef.current\r\n        ) {\r\n          setMessages((prev) => [...prev, data]);\r\n        }\r\n        socket?.emit(\"new message\", data);\r\n      } catch (error) {\r\n        console.error(\"Error sending message:\", error.response || error);\r\n        toast({\r\n          title: \"Error Occurred!\",\r\n          description: \"Failed to send message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // === Typing Handler ===\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n    if (!socketConnected || !selectedChatIdRef.current) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket?.emit(\"typing\", selectedChatIdRef.current);\r\n    }\r\n\r\n    const lastTypingTime = Date.now();\r\n    setTimeout(() => {\r\n      const timeNow = Date.now();\r\n      if (timeNow - lastTypingTime >= 3000 && typing) {\r\n        socket?.emit(\"stop typing\", selectedChatIdRef.current);\r\n        setTyping(false);\r\n      }\r\n    }, 3000);\r\n  };\r\n\r\n  // === Listen for Incoming Messages (de-duped + ref check) ===\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    const handleMessageReceived = (newMessageReceived) => {\r\n      // normalize id (some backends send chatId or chat)\r\n      const incomingChatId =\r\n        newMessageReceived?.chat?._id ||\r\n        newMessageReceived?.chatId ||\r\n        newMessageReceived?.chat;\r\n\r\n      const currentChatId = selectedChatIdRef.current;\r\n\r\n      if (!currentChatId || currentChatId !== incomingChatId) {\r\n        if (!notification.find((n) => n._id === newMessageReceived._id)) {\r\n          setNotification([newMessageReceived, ...notification]);\r\n          setFetchAgain((prev) => !prev);\r\n        }\r\n        return;\r\n      }\r\n\r\n      // same chat => push to UI immediately\r\n      setMessages((prev) => [...prev, newMessageReceived]);\r\n    };\r\n\r\n    // avoid duplicate listeners\r\n    socket.off(\"message received\", handleMessageReceived);\r\n    socket.on(\"message received\", handleMessageReceived);\r\n\r\n    return () => {\r\n      socket.off(\"message received\", handleMessageReceived);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [notification, setNotification, setFetchAgain]);\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          {/* === Chat Header === */}\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            {!selectedChat.isGroupChat ? (\r\n              <>\r\n                {getSender(user, selectedChat.users)}\r\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n              </>\r\n            ) : (\r\n              <>\r\n                {selectedChat.chatName.toUpperCase()}\r\n                <UpdateGroupChatModal\r\n                  fetchMessages={async () => {\r\n                    if (!selectedChat?._id) return;\r\n                    try {\r\n                      const config = {\r\n                        headers: { Authorization: `Bearer ${user.token}` },\r\n                      };\r\n                      const { data } = await axios.get(\r\n                        `${ENDPOINT}/api/message/${selectedChat._id}`,\r\n                        config\r\n                      );\r\n                      setMessages(data);\r\n                      socket?.emit(\"join chat\", selectedChat._id);\r\n                    } catch (error) {\r\n                      toast({\r\n                        title: \"Error Occurred!\",\r\n                        description: \"Failed to load messages\",\r\n                        status: \"error\",\r\n                        duration: 5000,\r\n                        isClosable: true,\r\n                        position: \"bottom\",\r\n                      });\r\n                    }\r\n                  }}\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                />\r\n              </>\r\n            )}\r\n          </Text>\r\n\r\n          {/* === Chat Box === */}\r\n          <Box\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Text>Loading...</Text>\r\n            ) : (\r\n              // force re-render on messages change or chat switch\r\n              <ScrollableChat key={`${selectedChat?._id}-${messages.length}`} messages={messages} />\r\n            )}\r\n\r\n            {/* === AI Suggestions === */}\r\n            <Box bg=\"white\" p={2} borderRadius=\"md\" mt={2}>\r\n              <Button\r\n                size=\"sm\"\r\n                colorScheme=\"blue\"\r\n                onClick={fetchAISuggestions}\r\n                isLoading={loadingSuggestions}\r\n              >\r\n                Get AI Suggestions\r\n              </Button>\r\n              {aiSuggestions.length > 0 && (\r\n                <Box mt={2}>\r\n                  {aiSuggestions.map((s, i) => (\r\n                    <Button\r\n                      key={i}\r\n                      size=\"sm\"\r\n                      m={1}\r\n                      variant=\"outline\"\r\n                      onClick={() => setNewMessage(s)}\r\n                    >\r\n                      {s}\r\n                    </Button>\r\n                  ))}\r\n                </Box>\r\n              )}\r\n            </Box>\r\n\r\n            {/* Typing Animation */}\r\n            {isTyping && (\r\n              <div>\r\n                <Lottie\r\n                  options={defaultOptions}\r\n                  width={70}\r\n                  style={{ marginBottom: 15, marginLeft: 0 }}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* Input Box */}\r\n            <FormControl isRequired mt={3}>\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message...\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n                onKeyDown={sendMessage}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState, useCallback } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\n// ✅ Create a single Axios instance\r\nconst API = axios.create({\r\n  baseURL: \"http://localhost:5000/api\",\r\n  withCredentials: true, // send cookies if any\r\n});\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n  const toast = useToast();\r\n\r\n  const fetchChats = useCallback(async () => {\r\n    if (!user?.token) return;\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      console.log(\"Fetching chats with token:\", user.token);\r\n\r\n      // ✅ Use Axios instance\r\n      const { data } = await API.get(\"/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching chats:\", error.response || error);\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: error.response?.data?.message || \"Failed to load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  }, [user, setChats, toast]);\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setLoggedUser(userInfo);\r\n    fetchChats();\r\n  }, [fetchAgain, user, fetchChats]);\r\n\r\n  return (\r\n    <Box\r\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        display=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            display=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n\r\n      <Box\r\n        display=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n           Class-Mate\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}